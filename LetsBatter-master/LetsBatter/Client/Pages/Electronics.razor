@page "/Electronics"

<h3>Electronics</h3>

<p>Browse a wide range of electronics available for sale or donation, including smartphones, laptops, TVs, and more!</p>

<!-- Filter by Category -->
<div class="filter-section">
    <h5>Filter by Category</h5>
    <ul class="filter-list">
        <li><a href="#">Smartphones</a></li>
        <li><a href="#">Laptops</a></li>
        <li><a href="#">Televisions</a></li>
        <li><a href="#">Audio Systems</a></li>
        <!-- Add more categories as needed -->
    </ul>
</div>

<!-- Search bar -->
<div class="search-section">
    <h5>Search for Electronics</h5>
    <input type="text" class="form-control" placeholder="Search electronics..." @bind="searchQuery" @oninput="SearchElectronics" />
</div>

<!-- Electronics List -->
<div class="electronics-list">
    @if (filteredElectronics?.Any() == true)
    {
        @foreach (var electronic in filteredElectronics)
        {
            <div class="electronics-item">
                <img src="@electronic.ImageUrl" alt="@electronic.Name" class="electronics-image" />
                <h4>@electronic.Name</h4>
                <p>@electronic.Description</p>
                <p><strong>Price:</strong> @electronic.Price</p>
                <button class="btn btn-primary" @onclick="() => AddToCart(electronic)">Add to Cart</button>
                <a href="electronics-details/@electronic.Id" class="btn btn-secondary">View Details</a>
            </div>
        }
    }
    else
    {
        <p>No electronics found matching your criteria.</p>
    }
</div>

<!-- Pagination -->
<div class="pagination">
    <button class="btn btn-outline-secondary" @onclick="PreviousPage" disabled="@(!CanGoToPreviousPage)">Previous</button>
    <button class="btn btn-outline-secondary" @onclick="NextPage" disabled="@(!CanGoToNextPage)">Next</button>
</div>

<style>
    .filter-section, .search-section {
        margin-bottom: 20px;
    }

    .filter-list {
        list-style-type: none;
        padding: 0;
    }

    .filter-list li {
        margin: 5px 0;
    }

    .electronics-list {
        display: flex;
        flex-wrap: wrap;
        gap: 20px;
    }

    .electronics-item {
        border: 1px solid #ddd;
        padding: 10px;
        text-align: center;
        width: 200px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .electronics-image {
        width: 100%;
        height: auto;
    }

    .btn-primary {
        background-color: #28a745;
        color: white;
    }

    .btn-secondary {
        background-color: #17a2b8;
        color: white;
        margin-top: 10px;
    }

    .pagination {
        display: flex;
        justify-content: space-between;
        margin-top: 20px;
    }
</style>

@code {
    private string searchQuery = string.Empty;
    private List<ElectronicItem> allElectronics = new List<ElectronicItem>
    {
        new ElectronicItem { Id = 1, Name = "Refridgerator", Description = "Latest model with advanced features", Price = "$800", ImageUrl = "/images/Refridgerator.avif" },
        new ElectronicItem { Id = 2, Name = "Washing Machine", Description = "Powerful washing machine ", Price = "$1200", ImageUrl = "/images/Washing Machine.jpg" },
        new ElectronicItem { Id = 3, Name = "TV C", Description = "4K UHD television for immersive viewing", Price = "$1500", ImageUrl = "/images/tv_c.jpg" },
        // Add more electronics items as needed
    };
    private List<ElectronicItem>? filteredElectronics;
    private int currentPage = 1;
    private const int itemsPerPage = 2;

    protected override void OnInitialized()
    {
        filteredElectronics = allElectronics.Take(itemsPerPage).ToList();
    }

    private void SearchElectronics()
    {
        filteredElectronics = allElectronics.Where(e => e.Name.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)).Take(itemsPerPage).ToList();
    }

    private void AddToCart(ElectronicItem electronic)
    {
        // Add to cart functionality (e.g., save to session, cart state)
        Console.WriteLine($"Added {electronic.Name} to cart!");
    }

    private bool CanGoToPreviousPage => currentPage > 1;
    private bool CanGoToNextPage => currentPage * itemsPerPage < allElectronics.Count;

    private void PreviousPage()
    {
        if (CanGoToPreviousPage)
        {
            currentPage--;
            filteredElectronics = allElectronics.Skip((currentPage - 1) * itemsPerPage).Take(itemsPerPage).ToList();
        }
    }

    private void NextPage()
    {
        if (CanGoToNextPage)
        {
            currentPage++;
            filteredElectronics = allElectronics.Skip((currentPage - 1) * itemsPerPage).Take(itemsPerPage).ToList();
        }
    }

    public class ElectronicItem
    {
        public int Id { get; set; }
        public required string Name { get; set; }  // Ensure Name is required
        public required string Description { get; set; }  // Ensure Description is required
        public required string Price { get; set; }  // Ensure Price is required
        public required string ImageUrl { get; set; }  // Ensure ImageUrl is required
    }
}
