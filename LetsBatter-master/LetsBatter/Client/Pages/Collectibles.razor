@page "/Collectibles"

<h3>Collectibles</h3>

<p>Explore our exclusive collection of rare and valuable items for sale or donation.</p>

<!-- Filter by Category -->
<div class="filter-section">
    <h5>Filter by Category</h5>
    <ul class="filter-list">
        <li><a href="#">Antiques</a></li>
        <li><a href="#">Art</a></li>
        <li><a href="#">Coins</a></li>
        <li><a href="#">Stamps</a></li>
        <!-- Add more categories as needed -->
    </ul>
</div>

<!-- Search bar -->
<div class="search-section">
    <h5>Search for Collectables</h5>
    <input type="text" class="form-control" placeholder="Search collectables..." @bind="searchQuery" @oninput="SearchCollectables" />
</div>

<!-- Collectables List -->
<div class="collectables-list">
    @if (filteredCollectables?.Any() == true)
    {
        @foreach (var collectable in filteredCollectables)
        {
            <div class="collectable-item">
                <img src="@collectable.ImageUrl" alt="@collectable.Name" class="collectable-image" />
                <h4>@collectable.Name</h4>
                <p>@collectable.Description</p>
                <p><strong>Price:</strong> @collectable.Price</p>
                <button class="btn btn-primary" @onclick="() => AddToCart(collectable)">Add to Cart</button>
                <a href="collectable-details/@collectable.Id" class="btn btn-secondary">View Details</a>
            </div>
        }
    }
    else
    {
        <p>No collectables found matching your criteria.</p>
    }
</div>

<!-- Pagination -->
<div class="pagination">
    <button class="btn btn-outline-secondary" @onclick="PreviousPage" disabled="@(!CanGoToPreviousPage)">Previous</button>
    <button class="btn btn-outline-secondary" @onclick="NextPage" disabled="@(!CanGoToNextPage)">Next</button>
</div>

<style>
    .filter-section, .search-section {
        margin-bottom: 20px;
    }

    .filter-list {
        list-style-type: none;
        padding: 0;
    }

    .filter-list li {
        margin: 5px 0;
    }

    .collectables-list {
        display: flex;
        flex-wrap: wrap;
        gap: 20px;
    }

    .collectable-item {
        border: 1px solid #ddd;
        padding: 10px;
        text-align: center;
        width: 200px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .collectable-image {
        width: 100%;
        height: auto;
    }

    .btn-primary {
        background-color: #28a745;
        color: white;
    }

    .btn-secondary {
        background-color: #17a2b8;
        color: white;
        margin-top: 10px;
    }

    .pagination {
        display: flex;
        justify-content: space-between;
        margin-top: 20px;
    }
</style>

@code {
    private string searchQuery = string.Empty;
    private List<Collectable> allCollectables = new List<Collectable>
    {
        new Collectable { Id = 1, Name = "Antique Vase", Description = "A rare 19th century vase", Price = "$2,000", ImageUrl = "/images/Antique Vase.jpg" },
        new Collectable { Id = 2, Name = "Rare Coin", Description = "An ancient coin from the Roman Empire", Price = "$5,000", ImageUrl = "/images/Rare Coin.jpg" },
        new Collectable { Id = 3, Name = "Vintage Painting", Description = "A vintage oil painting by a famous artist", Price = "$10,000", ImageUrl = "/images/vintage_painting.jpg" },
        // Add more collectable items as needed
    };
    private List<Collectable>? filteredCollectables;
    private int currentPage = 1;
    private const int itemsPerPage = 2;

    protected override void OnInitialized()
    {
        filteredCollectables = allCollectables.Take(itemsPerPage).ToList();
    }

    private void SearchCollectables()
    {
        filteredCollectables = allCollectables.Where(c => c.Name.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)).Take(itemsPerPage).ToList();
    }

    private void AddToCart(Collectable collectable)
    {
        // Add to cart functionality (e.g., save to session, cart state)
        Console.WriteLine($"Added {collectable.Name} to cart!");
    }

    private bool CanGoToPreviousPage => currentPage > 1;
    private bool CanGoToNextPage => currentPage * itemsPerPage < allCollectables.Count;

    private void PreviousPage()
    {
        if (CanGoToPreviousPage)
        {
            currentPage--;
            filteredCollectables = allCollectables.Skip((currentPage - 1) * itemsPerPage).Take(itemsPerPage).ToList();
        }
    }

    private void NextPage()
    {
        if (CanGoToNextPage)
        {
            currentPage++;
            filteredCollectables = allCollectables.Skip((currentPage - 1) * itemsPerPage).Take(itemsPerPage).ToList();
        }
    }

    public class Collectable
    {
        public int Id { get; set; }
        public required string Name { get; set; }  // Ensure Name is required
        public required string Description { get; set; }  // Ensure Description is required
        public required string Price { get; set; }  // Ensure Price is required
        public required string ImageUrl { get; set; }  // Ensure ImageUrl is required
    }
}
