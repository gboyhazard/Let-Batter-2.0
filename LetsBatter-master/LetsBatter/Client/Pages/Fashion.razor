add urls for Men's T-shirt and Women's dress to my Fashion code below 

@page "/Fashion"

<h3>Fashion</h3>

<p>Discover the latest trends in fashion! Browse through a wide range of clothing and accessories for men and women.</p>

<!-- Filter by Category -->
<div class="filter-section">
    <h5>Filter by Category</h5>
    <ul class="filter-list">
        <li><a href="#">Men</a></li>
        <li><a href="#">Women</a></li>
        <li><a href="#">Accessories</a></li>
        <!-- Add more categories as needed -->
    </ul>
</div>

<!-- Search bar -->
<div class="search-section">
    <h5>Search for Fashion Items</h5>
    <input type="text" class="form-control" placeholder="Search fashion..." @bind="searchQuery" @oninput="SearchFashionItems" />
</div>

<!-- Fashion Items List -->
<div class="fashion-items-list">
    @if (filteredFashionItems?.Any() == true)
    {
        @foreach (var fashionItem in filteredFashionItems)
        {
            <div class="fashion-item">
                <img src="@fashionItem.ImageUrl" alt="@fashionItem.Name" class="fashion-image" />
                <h4>@fashionItem.Name</h4>
                <p>@fashionItem.Description</p>
                <p><strong>Price:</strong> @fashionItem.Price</p>
                <button class="btn btn-primary" @onclick="() => AddToCart(fashionItem)">Add to Cart</button>
                <a href="fashion-details/@fashionItem.Id" class="btn btn-secondary">View Details</a>
            </div>
        }
    }
    else
    {
        <p>No fashion items found matching your criteria.</p>
    }
</div>

<!-- Pagination -->
<div class="pagination">
    <button class="btn btn-outline-secondary" @onclick="PreviousPage" disabled="@(!CanGoToPreviousPage)">Previous</button>
    <button class="btn btn-outline-secondary" @onclick="NextPage" disabled="@(!CanGoToNextPage)">Next</button>
</div>

<style>
    .filter-section, .search-section {
        margin-bottom: 20px;
    }

    .filter-list {
        list-style-type: none;
        padding: 0;
    }

    .filter-list li {
        margin: 5px 0;
    }

    .fashion-items-list {
        display: flex;
        flex-wrap: wrap;
        gap: 20px;
    }

    .fashion-item {
        border: 1px solid #ddd;
        padding: 10px;
        text-align: center;
        width: 200px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .fashion-image {
        width: 100%;
        height: auto;
    }

    .btn-primary {
        background-color: #28a745;
        color: white;
    }

    .btn-secondary {
        background-color: #17a2b8;
        color: white;
        margin-top: 10px;
    }

    .pagination {
        display: flex;
        justify-content: space-between;
        margin-top: 20px;
    }
</style>

@code {
    private string searchQuery = string.Empty;
    private List<FashionItem> allFashionItems = new List<FashionItem>
    {
        new FashionItem { Id = 1, Name = "Men's T-Shirt", Description = "Comfortable cotton t-shirt for men", Price = "$25", ImageUrl = "/images/Men's T-shirt.jpg" },
        new FashionItem { Id = 2, Name = "Women's Dress", Description = "Elegant evening dress for women", Price = "$80", ImageUrl = "/images/Women's dress.jpg" },
        new FashionItem { Id = 3, Name = "Leather Bag", Description = "Premium leather bag for men and women", Price = "$150", ImageUrl = "/images/leather_bag.jpg" },
        // Add more fashion items as needed
    };
    private List<FashionItem>? filteredFashionItems;
    private int currentPage = 1;
    private const int itemsPerPage = 2;

    protected override void OnInitialized()
    {
        filteredFashionItems = allFashionItems.Take(itemsPerPage).ToList();
    }

    private void SearchFashionItems()
    {
        filteredFashionItems = allFashionItems.Where(f => f.Name.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)).Take(itemsPerPage).ToList();
    }

    private void AddToCart(FashionItem fashionItem)
    {
        // Add to cart functionality (e.g., save to session, cart state)
        Console.WriteLine($"Added {fashionItem.Name} to cart!");
    }

    private bool CanGoToPreviousPage => currentPage > 1;
    private bool CanGoToNextPage => currentPage * itemsPerPage < allFashionItems.Count;

    private void PreviousPage()
    {
        if (CanGoToPreviousPage)
        {
            currentPage--;
            filteredFashionItems = allFashionItems.Skip((currentPage - 1) * itemsPerPage).Take(itemsPerPage).ToList();
        }
    }

    private void NextPage()
    {
        if (CanGoToNextPage)
        {
            currentPage++;
            filteredFashionItems = allFashionItems.Skip((currentPage - 1) * itemsPerPage).Take(itemsPerPage).ToList();
        }
    }

    public class FashionItem
    {
        public int Id { get; set; }
        public required string Name { get; set; }  // Ensure Name is required
        public required string Description { get; set; }  // Ensure Description is required
        public required string Price { get; set; }  // Ensure Price is required
        public required string ImageUrl { get; set; }  // Ensure ImageUrl is required
    }
}